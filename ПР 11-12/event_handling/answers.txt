1.	В чем разница между event.preventDefault() и event.stopPropagation()? В каких ситуациях используется каждый метод?
preventDefault() - отменяет стандартное поведение браузера
stopPropagation() - останавливает всплытие события
Используются: preventDefault - для форм, ссылок; stopPropagation - когда нужно изолировать событие

2.	Как работает делегирование событий и какие преимущества оно дает по сравнению с назначением обработчиков на отдельные элементы?
Один обработчик на родителе для всех потомков. Преимущества: экономия памяти, работа с динамическими элементами, упрощение кода

3.	Какие фазы жизненного цикла события существуют в JavaScript (capturing, target, bubbling) и как они влияют на порядок выполнения обработчиков?
Capturing - сверху вниз к цели
Target - на целевом элементе
Bubbling - снизу вверх от цели
Влияние: порядок выполнения обработчиков зависит от фазы регистрации

4.	В чем разница между event.target и event.currentTarget? Когда следует использовать каждый из них?
target - элемент, который инициировал событие
currentTarget - элемент, на котором выполняется обработчик
Использовать: target - для определения источника, currentTarget - для работы с обработчиком

5.	Как создать и запустить кастомное событие? Какие параметры можно передать в конструктор CustomEvent?
Создать: new CustomEvent(), запустить: dispatchEvent()
Параметры: type, detail (данные), bubbles, cancelable

6.	Что такое debounce и throttle? В каких практических ситуациях их применение наиболее эффективно?
Debounce - выполняется после паузы
Throttle - выполняется не чаще указанного интервала
Эффективно: поиск, resize, scroll, input

7.	Какие методы существуют для удаления обработчиков событий и почему важно удалять ненужные обработчики?
Методы: removeEventListener(), once опция
Важность: предотвращение утечек памяти, конфликтов

8.	Как обрабатывать ошибки загрузки ресурсов (изображений, скриптов) и какие события для этого используются?
События: error, load, abort
Методы: onerror обработчики, try-catch для скриптов

9.	В чем разница между addEventListener и прямым назначением обработчиков через onclick, onkeydown и т.д.?
Разница: множественные обработчики vs один, контроль фазы, больше опций
Преимущество: addEventListener гибче и мощнее

10.	Как оптимизировать производительность при работе с большим количеством событий? Какие лучшие практики существуют?
Лучшие практики: делегирование, throttling/debouncing, passive события, удаление ненужных обработчиков, избегание частых перерисовок
